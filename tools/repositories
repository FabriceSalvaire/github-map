#! /usr/bin/env python3

####################################################################################################

import argparse
from datetime import datetime
import json
import os

# http://pygithub.readthedocs.io/en/latest/
from github import Github

####################################################################################################

parser = argparse.ArgumentParser(description='...')
parser.add_argument('--upload',
                    action='store_true', default=False,
                    help='upload from Github')
parser.add_argument('--json-path',
                    default='github-cache.json',
                    help='JSON cache file path')
parser.add_argument('--make-map',
                    action='store_true', default=False,
                    help='')
parser.add_argument('--list',
                    action='store_true', default=False,
                    help='')

args = parser.parse_args()

####################################################################################################

class Repository:

    ##############################################

    def __init__(self, **kwargs):

        self._keys = kwargs.keys()
        for key, value in kwargs.items():
            setattr(self, key, value)

        self.listed = False

    ##############################################

    @staticmethod
    def _python_to_json(x):

        if isinstance(x, datetime):
            print('>', x, str(x))
            return str(x)
        else:
            return x

    ##############################################

    def to_json(self):

        return {key:self._python_to_json(getattr(self, key))
                for key in self._keys}

    ##############################################

    def to_markdown(self):

        self.listed = True

        content = '\n'
        content += '* [{0.name}]({0.html_url})'.format(self)
        if self.stargazers_count:
            content += ' {0.stargazers_count} :star:</br>'.format(self)
        content += '\n\n'
        content += '   {0.description}\n\n'.format(self)
        date = datetime.strptime(self.updated_at, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d')
        content += '   Updated on {}\n'.format(date)

        # {0.language}</br>
        # content += '\n'

        return content

####################################################################################################

class Repositories:

    ##############################################

    def __init__(self):

        self._repositories = {}

    ##############################################

    def upload(self):

        token_path = os.path.expanduser('~/.github-token')
        with open(token_path, 'r') as f:
            token = f.readline().strip()
            # token = ''

        print('Start upload')
        github = Github(login_or_token=token)

        for repository in github.get_user().get_repos():
            print('  {.name}'.format(repository))
            # http://pygithub.readthedocs.io/en/latest/github_objects/Repository.html
            # https://developer.github.com/v3/repos/
            keys = (
                #! 'topics',
                'created_at',
                'description',
                'fork',
                'forks_count',
                'full_name',
                'html_url',
                'language',
                'name',
                'network_count',
                'private',
                'pushed_at',
                'source',
                'stargazers_count',
                'subscribers_count',
                'updated_at',
                'watchers_count',
            )
            kwargs = {key:getattr(repository, key) for key in keys}
            source = kwargs['source']
            if source is not None:
                kwargs['source'] = source.full_name
            repository_data = Repository(**kwargs)
            self._repositories[repository_data.name] = repository_data
        print('Upload done')

    ##############################################

    def save(self, json_path):

        print('Write {}'.format(json_path))
        data = [repository.to_json() for repository in self._repositories.values()]
        print(data)
        with open(json_path, 'w') as fh:
            json.dump(data, fh, indent=4, sort_keys=True)

    ##############################################

    def load(self, json_path):

        print('Load {}'.format(json_path))
        with open(json_path, 'r') as fh:
            data = json.load(fh)
        for repository_data in data:
            repository_data = Repository(**repository_data)
            self._repositories[repository_data.name] = repository_data

    ##############################################

    @property
    def names(self):
        return sorted(self._repositories.keys())

    ##############################################

    def __iter__(self):

        # return iter(self._repositories.values())
        for name in self.names:
            repository = self._repositories[name]
            yield repository

    ##############################################

    def __getitem__(self, name):
        return self._repositories[name]

    ##############################################

    @property
    def forks(self):

        for repository in self:
            if repository.fork:
                yield repository

    ##############################################

    @property
    def fork_names(self):

        for repository in self.forks:
            yield repository.name

    ##############################################

    def by_star(self, names):

        repositories = [self._repositories[name] for name in sorted(names)]
        get_key = lambda x: x.stargazers_count # '{:3}{}'.format(x.stargazers_count, x.name)
        return sorted(repositories, key=get_key, reverse=True)

    ##############################################

    def to_markdown(self, names):

        return ''.join([repository.to_markdown() for repository in self.by_star(names)])

    ##############################################

    def missed(self):

        for repository in self:
            if not repository.listed:
                yield repository

####################################################################################################

class Content:

    ##############################################

    def __init__(self, repositories):

        self._repositories = repositories
        self._content = ''

    ##############################################

    def __iadd__(self, content):

        self._content += content
        return self

    ##############################################

    def __str__(self):

        return str(self._content)

    ##############################################

    def _title(self, level, title):
        self._content += '\n{} {}\n'.format('#'*level, title)

    ##############################################

    def h1(self, title):
        self._title(1, title)

    ##############################################

    def h2(self, title):
        self._title(2, title)

    ##############################################

    def h3(self, title):
        self._title(3, title)

    ##############################################

    def list(self, names):

        self += self._repositories.to_markdown(names)

####################################################################################################

repositories = Repositories()
if args.upload:
    repositories.upload()
    repositories.save(args.json_path)
else:
    repositories.load(args.json_path)

if args.list:
    for repository in repositories:
        fork = 'F' if repository.fork else ' '
        print("{} '{}',".format(fork, repository.name))

if args.make_map:

    content = Content(repositories)
    content.h1('Summary of my projects on Github')

    content.h2('Python')
    content.list((
        'AutoSphinx',
        'Biblio',
        'CodeReview',
        'LaptopControlPanel',
        'Musica',
        'Musica-data',
        'PyDVI',
        'PyLibTiff',
        'PyMetrology',
        'PyOpenGLng',
        'PyValentina',
        'c2c-api-client',
        'elbrea',
        'github-map',
        'monitor-server',
        'pyFinancialSimulator',
        'pygeoportail',
        'pyglfw-cffi',
        'pygments-lexer',
        'python-interval-arithmetic',
        'python-memo',
        'python-package-template',
        # 'python-project-template',
    ))

    content.h2('Python Web Application')
    content.list((
        'bleau-database',
        'grouped-purchase-order',
    ))

    content.h2('DjangoCMS')
    content.list((
        'cmsplugin-getthecode',
        'cmsplugin-markup-language',
        'cmsplugin-svg',
    ))

    content.h2('Python Electronic')
    content.list((
        'PyCpuSimulator',
        'PyResistorColorCode',
        'PySpice',
    ))

    content.h2('Python Mechanic')
    content.list((
        'linear-delta-robot',
    ))

    content.h2('Python Image Processing')
    content.list((
        'mamba-image',
        'simple-morpho-math',
    ))

    content.h2('Web')
    content.list((
        'css-demo',
        'redmine-improved-theme',
    ))

    content.h2('Sphinx')
    content.list((
        'sphinx-css3image',
        'sphinx-getthecode',
        'sphinx-lilypond',
        'sphinx-microdata',
        'sphinx-sass-theme',
    ))

    content.h2('Qt')
    content.list((
        # 'qt5-bugs',
        # 'qt5-snippets',
        'qt5-vector-graphic-shaders',
    ))

    content.h2('Others')
    content.list((
        'mupdf-cmake',
    ))

    content.h2('Tools')
    content.list((
        'tex-calendar',
    ))

    content.h2('Fedora')
    content.list((
        'copr-mao',
        'copr-ngspice',
        'copr-xyce',
    ))

    content.h2('Talks')
    content.list((
        'pyconfr-2014',
        'pyparis-2017',
    ))

    content.h2('Outdated')
    content.list((
        'libfprint-baspi',
    ))

    content.h2('Contributed')

    # F 'aldryn-newsblog',
    # F 'bokeh',
    # F 'cmsplugin-mathjax',
    # F 'cmsplugin-rst',
    # F 'cprofilev',
    # F 'django-cms-boilerplate',
    # F 'django-jinja',
    # F 'django-messages',
    # F 'django-tablib',
    # F 'djangocms-youtube',
    # F 'euroscipy_proceedings',
    # F 'git-scm.com',
    # F 'ihatemoney',
    # F 'normalize.css',
    # F 'pygit2',
    # F 'vpo2',
    ## F 'mupdf-v1.3',
    ## F 'simavr',
    ## F 'swalign',
    content.list(repositories.fork_names)

    with open('README.md', 'w') as fh:
        fh.write(str(content))

    print('\nMissed:')
    for repository in repositories.missed():
        print(' ', repository.name)
