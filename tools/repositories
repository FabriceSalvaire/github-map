#! /usr/bin/env python3

####################################################################################################
#
# Copyright (C) 2017 Salvaire Fabrice
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
####################################################################################################

####################################################################################################

import argparse

from Repositories import *

####################################################################################################

parser = argparse.ArgumentParser(description='...')
parser.add_argument('--upload',
                    action='store_true', default=False,
                    help='upload from Github')
parser.add_argument('--json-path',
                    default='github-cache.json',
                    help='JSON cache file path')
parser.add_argument('--make-map',
                    action='store_true', default=False,
                    help='')
parser.add_argument('--list',
                    action='store_true', default=False,
                    help='')
parser.add_argument('--star',
                    action='store_true', default=False,
                    help='make star plot')

args = parser.parse_args()

####################################################################################################

repositories = Repositories()
if args.upload:
    repositories.upload()
    repositories.save(args.json_path)
else:
    repositories.load(args.json_path)

if args.list:
    for repository in repositories:
        fork = 'F' if repository.fork else ' '
        print("{} '{}',".format(fork, repository.name))

if args.star:
    figure, axe = Repository.star_figure(1) # 2 is by project
    for repository in repositories:
        repository.plot_stars(axe) # Fixme: better ???
        repository.plot_stars()
    Repository.save_figure(figure, 'all')

if args.make_map:

    content = Content(repositories)
    content.h1('Summary of my projects on Github')

    content += '\n'
    content += '![star plot](https://raw.github.com/FabriceSalvaire/github-map/master/star-plots/all.png)'
    content += '\n'

    content.h2('Python Packages')
    content.list((
        'PyDVI',
        'PyMetrology',
        'PyOpenGLng',
        'pyglfw-cffi',
        'python-interval-arithmetic',
    ))

    content.h2('Python Tools for Developers')
    content.list((
        'CodeReview',
        'github-map',
        'python-memo',
        'python-package-template',
        # 'python-project-template',
    ))

    content.h2('Sphinx')
    content.list((
        'AutoSphinx',
        'pygments-lexer',
        'sphinx-css3image',
        'sphinx-getthecode',
        'sphinx-lilypond',
        'sphinx-microdata',
        'sphinx-sass-theme',
    ))

    content.h2('Python Web Application')
    content.list((
        'bleau-database',
        'grouped-purchase-order',
    ))

    content.h2('DjangoCMS')
    content.list((
        'cmsplugin-getthecode',
        'cmsplugin-markup-language',
        'cmsplugin-svg',
    ))

    content.h2('Python Web Tools')
    content.list((
        'c2c-api-client',
    ))

    content.h2('Python Electronic')
    content.list((
        'PyCpuSimulator',
        'PyResistorColorCode',
        'PySpice',
    ))

    content.h2('Python Mechanic')
    content.list((
        'linear-delta-robot',
    ))

    content.h2('Python Image Processing')
    content.list((
        'mamba-image',
        'simple-morpho-math',
    ))

    content.h2('Python Pattern Drafting')
    content.list((
        'PyValentina',
    ))

    content.h2('Python Music')
    content.list((
        'Musica',
        'Musica-data',
    ))

    content.h2('Python Finance')
    content.list((
        'pyFinancialSimulator',
    ))

    content.h2('Python Application (PyQt5)')
    content.list((
        'Biblio',
        'LaptopControlPanel',
        'elbrea',
        'monitor-server',
        'pygeoportail',
    ))

    content.h2('Python Outdated')
    content.list((
        'PyLibTiff', # outdated ???
    ))

    content.h2('Web')
    content.list((
        'css-demo',
        'redmine-improved-theme',
    ))

    content.h2('Qt')
    content.list((
        # 'qt5-bugs',
        # 'qt5-snippets',
        'qt5-vector-graphic-shaders',
    ))

    content.h2('Others')
    content.list((
        'mupdf-cmake',
    ))

    content.h2('Tools')
    content.list((
        'tex-calendar',
    ))

    content.h2('Fedora')
    content.list((
        'copr-mao',
        'copr-ngspice',
        'copr-xyce',
    ))

    content.h2('Talks')
    content.list((
        'pyconfr-2014',
        'pyparis-2017',
    ))

    content.h2('Outdated')
    content.list((
        'libfprint-baspi',
    ))

    content.h2('Contributed')

    # F 'aldryn-newsblog',
    # F 'bokeh',
    # F 'cmsplugin-mathjax',
    # F 'cmsplugin-rst',
    # F 'cprofilev',
    # F 'django-cms-boilerplate',
    # F 'django-jinja',
    # F 'django-messages',
    # F 'django-tablib',
    # F 'djangocms-youtube',
    # F 'euroscipy_proceedings',
    # F 'git-scm.com',
    # F 'ihatemoney',
    # F 'normalize.css',
    # F 'pygit2',
    # F 'vpo2',

    ## F 'mupdf-v1.3',
    ## F 'simavr',
    ## F 'swalign',

    content.list(repositories.fork_names)

    with open('README.md', 'w') as fh:
        fh.write(str(content))

    print('\nMissed:')
    for repository in repositories.missed():
        print(' ', repository.name)
